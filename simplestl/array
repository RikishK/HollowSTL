#include "iterator.h"
#include "reverse_iterator.h"

#ifndef ARRAY_H_
#define ARRAY_H_

namespace std{
    template <typename T, unsigned int N>
    class array {
        private:
            size_t size;
            T* array;
        public:
            using value_type            = T;
            using pointer               = T*;
            using const_pointer         = const T;
            using reference             = T&;
            using const_reference       = const T&;
            using size_type             = size_t;

            // iterator typedefs
            typedef iterator_base<T>            iterator;
            typedef const iterator_base<T>      const_iterator;

            typedef reverse_iterator_base<T>         reverse_iterator;
            typedef const reverse_iterator_base<T>   const_reverse_iterator;

            // iterators
            iterator               begin();
            const_iterator         begin() const;
            iterator               end();
            const_iterator         end() const; 
            reverse_iterator       rbegin();
            const_reverse_iterator rbegin() const;
            reverse_iterator       rend();
            const_reverse_iterator rend() const;
        
            const_iterator         cbegin() const;
            const_iterator         cend() const;
            const_reverse_iterator crbegin() const;
            const_reverse_iterator crend() const;

            // CAPACITY
            size_type size() const;
            size_type max_size() const;
            bool empty() const;

            // ELEMENT ACCESS
            reference           operator[] (size_type n);
            const_reference     operator[] (size_type n) const;
            reference           at() (size_type n);
            const_reference     at() (size_type n) const;
            reference           front();
            const_reference     front() const;
            reference           back();
            const_reference     back() const;
            value_type*         data();
            const value_type*   data() const;

            // MODIFIERS
            void fill (const value_type& val);
            void swap (array&); 

    };

    // BEGIN IMPLEMENTATION
}
#endif

