#ifndef SET_H_
#define SET_H_
#include <redblacktree>
#include "iterator.h"
#include "reverse_iterator.h"
namespace std{
    template <class T>
    class set : public redblacktree<T> {
    private:
        


    public:
        
        // types
        using key_type          = T;
        using value_type        = T;
        using reference         = value_type&;
        using const_reference   = const value_type&;
        using size_type         = size_t;
        using node_type         = typename redblacktree<T>::redblacknode;

        // construct/copy/destroy
        set();


        // iterators
        typedef iterator_base<typename redblacktree<T>::redblacknode>            iterator;
        typedef const iterator_base<typename redblacktree<T>::redblacknode>      const_iterator;

        typedef reverse_iterator_base<typename redblacktree<T>::redblacknode>         reverse_iterator;
        typedef const reverse_iterator_base<typename redblacktree<T>::redblacknode>   const_reverse_iterator;
        
        
        iterator               begin(); 
        iterator               end();
        reverse_iterator       rbegin();
        reverse_iterator       rend();
        const_iterator         cbegin();
        const_iterator         cend();
        const_reverse_iterator crbegin();
        const_reverse_iterator crend();
    
        

        // capacity
        bool empty();
        size_type size() const;
        size_type max_size() const;

        // modifiers
        pair<iterator,bool> insert(const value_type& x);
        pair<iterator,bool> insert(value_type&& x);
        iterator insert(const_iterator position, const value_type& x);
        iterator insert(const_iterator position, value_type&& x);
        template<class InputIt>
            void insert(InputIt first, InputIt last);
        void insert(initializer_list<value_type>);
        iterator  erase(const_iterator position);
        size_type erase(const value_type& x);
        iterator  erase(const_iterator first, const_iterator last);
        void      swap(set& x);
        void      clear() noexcept;
        template<class... Args> 
            pair<iterator, bool> emplace(Args&&... args);
        template<class... Args> 
            iterator emplace_hint(const_iterator position, Args&&... args);

        // set operations
        iterator       find(const key_type& x);
        const_iterator find(const key_type& x) const;
        template<class K> iterator       find(const K& x);
        template<class K> const_iterator find(const K& x) const;
    
        size_type      count(const key_type& x) const;
        template<class K> size_type count(const K& x) const;
    
        bool           contains(const key_type& x) const;
        template<class K> bool contains(const K& x) const;
    
        iterator       lower_bound(const key_type& x);
        const_iterator lower_bound(const key_type& x) const;
        template<class K> iterator       lower_bound(const K& x);
        template<class K> const_iterator lower_bound(const K& x) const;
    
        iterator       upper_bound(const key_type& x);
        const_iterator upper_bound(const key_type& x) const;
        template<class K> iterator       upper_bound(const K& x);
        template<class K> const_iterator upper_bound(const K& x) const;
    
        pair<iterator, iterator>               equal_range(const key_type& x);
        pair<const_iterator, const_iterator>   equal_range(const key_type& x) const;
        template<class K>
        pair<iterator, iterator>             equal_range(const K& x);
        template<class K>
        pair<const_iterator, const_iterator> equal_range(const K& x) const;
    };

    template<class T>
    set<T>::set(){
        
    }

    template<class T>
    pair<typename set<T>::iterator, bool> insert(typename set<T>::value_type&& x){
        typename set<T>::iterator it = insert(x);
        pair<typename set<T>::iterator, bool> result = make_pair(it, false);
        return result;
    }

    template<class T>
    iterator<T> begin(){
        return iterator<T>(getroot());
    }

}

#endif