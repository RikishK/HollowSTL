// #include "vector"
#ifndef STACK_H_
#define STACK_H_
#include "vector"

namespace std{
    template <class T>
    class stack {
    private:
        std::vector<T> container;
    public:
        using value_type        = typename container::value_type;
        using reference         = typename container::reference;
        using const_reference   = typename container::const_reference;
        using size_type         = typename container::size_type;
        using container_type    = container;

        // Constructor
        stack();
        stack(const container_type& ctnr = container_type());

        // Other member functions
        bool                            empty() const;
        size_type                       size() const;
        value_type&                     top();
        const value_type&               top() const;
        void                            push(const value_type& val);
        template<class... Args> void    emplace(Args&&... args);
        void                            pop();
        void                            swap(stack& x);
    };

    // START STACK IMPLEMENTATION
    
    template<class T>
    bool stack<T>::empty() const
    {
        return container.empty();
    }

    template<class T>
    stack<T>::size_type stack<T>::size() const 
    {
        return container.size();
    }

    template<class T>
    stack<T>::value_type& stack<T>::top()
    {

    }

    template<class T>
    const stack<T>::value_type& stack<T>::top() const
    {

    }

    template<class T>
    void stack<T>::push(const stack<T>::value_type& val)
    {

    }

    template<class... Args>
    template<class T>
    void stack<T>::emplace(Args&&... args)
    {

    }

    template<class T>
    void stack<T>::pop()
    {

    }

    template<class T>
    void stack<T>::swap(stack& x)
    {

    }
} // end namespace std

#endif