#ifndef DEQUE_H_
#define DEQUE_H_


namespace std{
    template <typename T>
    class deque {
    private:
        

    public:
        // types
        using value_type            = T;
        using reference             = value_type&;
        using const_reference       = const value_type&
        using size_type             = size_t;

        struct iterator{

        };

        // Construct/destroy
        deque();
        deque(size_type n, const T& val = T());
        template<class InputIt>
        deque(InputIt first, InputIt last);
        deque(const deque& x);

        // ITERATORS

        iterator               begin();
        const_iterator         begin() const;
        iterator               end();
        const_iterator         end() const; 
        reverse_iterator       rbegin();
        const_reverse_iterator rbegin() const;
        reverse_iterator       rend();
        const_reverse_iterator rend() const;
    
        const_iterator         cbegin() const;
        const_iterator         cend() const;
        const_reverse_iterator crbegin() const;
        const_reverse_iterator crend() const;
        
        // CAPACITY
        size_type           size() const;
        size_type           max_size() const;
        void                resize(size_type n, value_type val = value_type());
        bool                empty() const;
        void                shrink_to_fit();

        // ELEMENT ACCESS
        reference               operator[] (size_type n);
        const_reference         operator[] (size_type n) const;
        reference                       at (size_type n);
        const_reference                 at (size_type n) const;
        reference               front();
        const_reference         front() const;
        reference               back();
        const_reference         back() const;

        // MODIFIERS
        template <class InputIt> void       assign(InputIt first, IntputIt last);
        void                                assign(size_type n, const value_type& val);
        void                                push_back(const value_type& val);
        void                                push_front(const value_type& val);
        void                                pop_back();
        void                                pop_front();
        iterator                            insert(iterator position, const value_type& val);
        void                                insert(iterator position, size_type n, const value_type& val);
        template <classInputIt> void        insert(iterator position, InputIt first, InputIt last);
        iterator                            erase(iterator position);
        iterator                            erase(iterator first, iterator last);
        void                                swap(deque& x);
        void                                clear();
        template<class... Args> iterator    emplace(const_iterator position, Args&&... args);
        template<class... Args> void        emplace_front(Args&&... args);
        template<class... Args> void        emplace_back(Args&&... args);

    };
}

#endif
