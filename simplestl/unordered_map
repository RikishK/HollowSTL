#include <utility>

template <typename K, typename V>
class unordered_map {
private:

    std::pair<K,V> val;
public:

    struct const_iterator
    {
        using value_type = std::pair<K, V>;
        using pointer = std::pair<K, V>; 
        using reference = std::pair<K, V>&;



        const_iterator(pointer ptr) : m_ptr(ptr) {}

        pointer* operator ->() { return &m_ptr; }


    private:
        pointer m_ptr;
    };

    const_iterator  begin() { return const_iterator(val); }

    unordered_map() {

    }

    void insert(const std::pair<K, V> &p) {

    }

    V& operator[] (int a){
        return val.second;
    }

};