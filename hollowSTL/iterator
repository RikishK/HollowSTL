template<typename blDataType>
class iterator_base
{
public:
    using value_type        = blDataType;
    using pointer           = blDataType*;
    using reference         = blDataType&;
    using difference_type   = std::ptrdiff_t;

    iterator_base(pointer ptr) : m_ptr(ptr) {}
    iterator_base(const iterator_base<blDataType>& rawIterator) = default;
    ~iterator_base() {}

    iterator_base<blDataType>&                  operator=(const iterator_base<blDataType>& rawIterator) = default;
    iterator_base<blDataType>&                  operator=(blDataType* ptr){m_ptr = ptr;return (*this);}

    operator                                    bool()const
    {
        if(m_ptr)
            return true;
        else
            return false;
    }

    bool                                        operator==(const iterator_base<blDataType>& rawIterator)const{return (m_ptr == rawIterator.getConstPtr());}
    bool                                        operator!=(const iterator_base<blDataType>& rawIterator)const{return (m_ptr != rawIterator.getConstPtr());}

    iterator_base<blDataType>&                  operator+=(const difference_type& movement){m_ptr += movement;return (*this);}
    iterator_base<blDataType>&                  operator-=(const difference_type& movement){m_ptr -= movement;return (*this);}
    iterator_base<blDataType>&                  operator++(){++m_ptr;return (*this);}
    iterator_base<blDataType>&                  operator--(){--m_ptr;return (*this);}
    iterator_base<blDataType>                   operator++(int){auto temp(*this);++m_ptr;return temp;}
    iterator_base<blDataType>                   operator--(int){auto temp(*this);--m_ptr;return temp;}
    iterator_base<blDataType>                   operator+(const difference_type& movement){auto oldPtr = m_ptr;m_ptr+=movement;auto temp(*this);m_ptr = oldPtr;return temp;}
    iterator_base<blDataType>                   operator-(const difference_type& movement){auto oldPtr = m_ptr;m_ptr-=movement;auto temp(*this);m_ptr = oldPtr;return temp;}

    difference_type                             operator-(const iterator_base<blDataType>& rawIterator){return std::distance(rawIterator.getPtr(),this->getPtr());}

    blDataType&                                 operator*(){return *m_ptr;}
    const blDataType&                           operator*()const{return *m_ptr;}
    blDataType*                                 operator->(){return m_ptr;}

    blDataType*                                 getPtr()const{return m_ptr;}
    const blDataType*                           getConstPtr()const{return m_ptr;}


protected:
    blDataType*       m_ptr;

};

template<typename DataType>
class reverse_iterator_base : public iterator_base<DataType>
{
    public:
        using value_type        = DataType;
        using pointer           = DataType*;
        using reference         = DataType&;
        using difference_type   = std::ptrdiff_t;

        reverse_iterator_base(DataType* ptr = nullptr):iterator_base<DataType>(ptr){}
        reverse_iterator_base(const iterator_base<DataType>& rawIterator){this->m_ptr = rawIterator.getPtr();}
        reverse_iterator_base(const reverse_iterator_base<DataType>& rawReverseIterator) = default;
        ~reverse_iterator_base(){}

        reverse_iterator_base<DataType>&           operator=(const reverse_iterator_base<DataType>& rawReverseIterator) = default;
        reverse_iterator_base<DataType>&           operator=(const iterator_base<DataType>& rawIterator){this->m_ptr = rawIterator.getPtr();return (*this);}
        reverse_iterator_base<DataType>&           operator=(DataType* ptr){this->setPtr(ptr);return (*this);}

        reverse_iterator_base<DataType>&           operator+=(const difference_type& movement){this->m_ptr -= movement;return (*this);}
        reverse_iterator_base<DataType>&           operator-=(const difference_type& movement){this->m_ptr += movement;return (*this);}
        reverse_iterator_base<DataType>&           operator++(){--this->m_ptr;return (*this);}
        reverse_iterator_base<DataType>&           operator--(){++this->m_ptr;return (*this);}
        reverse_iterator_base<DataType>            operator++(int){auto temp(*this);--this->m_ptr;return temp;}
        reverse_iterator_base<DataType>            operator--(int){auto temp(*this);++this->m_ptr;return temp;}
        reverse_iterator_base<DataType>            operator+(const int& movement){auto oldPtr = this->m_ptr;this->m_ptr-=movement;auto temp(*this);this->m_ptr = oldPtr;return temp;}
        reverse_iterator_base<DataType>            operator-(const int& movement){auto oldPtr = this->m_ptr;this->m_ptr+=movement;auto temp(*this);this->m_ptr = oldPtr;return temp;}

        iterator_base<DataType>                   base(){iterator_base<DataType> forwardIterator(this->m_ptr); ++forwardIterator; return forwardIterator;}
};