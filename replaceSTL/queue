#include <algorithm>
#include <iostream>
using namespace std;

#define SIZE 1000

template<typename T>
class queue{
    T *p;
    int capacity;
    int frnt;
    int rear;
    int count;

    public:
    queue(int size = SIZE){
        p = new T[size];
        capacity = size;
        frnt = 0;
        rear = -1;
        count = 0;
    }

    ~queue(){
        delete[] p;
    }

    //MEMBER FUNCTIONS

    queue& operator=(queue& other){
        queue temp;
        clear();

        for(int i = 0; i < other.size(); i++){
            push(other.p[i]);
        }

        return *this;
    }

    //ELEMENT ACCESS

    T& front(){
        return p[frnt];
    }

    T& back(){
        return p[rear];
    }

    //CAPACITY

    bool empty(){
        return count == 0;
    }

    int size(){
        return count;
    }

    //MODIFIERS

    void push(T d){
        if(isFull()){
            exit(EXIT_FAILURE);
        }

        rear = (rear + 1) % capacity;
        p[rear] = d;
        count++;
    }

    void pop(){
        if (empty())
        {
            exit(EXIT_FAILURE);
        }
        else {
            for(int i = 0; i < count-1; i++){
                p[i] = p[i+1];
            }
            
            rear--;
            count--;
        }
    }

    void swap(queue& other){
        queue temp;
        temp = *this;
        *this = other;
        other = temp;
    }

    //OTHER

    bool isFull(){
        return count == capacity;
    }

    void clear(){
        while(size() != 0){
            pop();
        }
    }

};