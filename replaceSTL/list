#include <algorithm>
#include <iostream>
using namespace std;

template<typename T>
struct Node{
    T data;
    Node* next; 
    Node* previous;
    Node() = default;
    Node(T d) : data (d) {}
};

template<typename T>
class list
{
    Node<T>* m_head;
    Node<T>* m_tail;
    int m_size;

    public:
    class const_iterator{
        public:
        const_iterator(Node<T>* p) : my_ptr(p){
            
        }

        const T& operator*(){
            return my_ptr->data;
        }

        private:
        Node<T>* my_ptr;
    };

    list() : m_head(nullptr) , m_tail(nullptr) , m_size(0) {

    }

    ~list() {
            Node<T>* current_node = m_head;
            while (current_node != nullptr) {
                Node<T>* next_node = current_node->next;
                delete current_node;
                current_node = next_node;
            }
            m_head = nullptr;
        }

    void push_back(T d){
        Node<T>* head_temp = m_head;
        Node<T>* current = new Node<T>(d);
        head_temp->previous = current;
        m_head = current;
        m_head->next = head_temp;
        ++m_size;
    }

    //ELEMENT ACCESS

    T& front(){
        return m_head->data;
    } 

    T& back(){
        return m_tail->data;
    }

    //ITERATORS

    const_iterator begin(){
        return const_iterator(m_head);
    }

    


    



};