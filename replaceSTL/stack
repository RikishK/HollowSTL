#include <algorithm>
#include <iostream>
using namespace std;

#define SIZE 10

template<typename T>
class stack{
    T *p;
    int m_top;
    int capacity;

    public:
    stack(int size = SIZE){
        p = new T[size];
        m_top = -1;
        capacity = size;
    }

    ~stack(){
        delete[] p;
    }

    //MEMBER FUNCTIONS

    stack& operator=(stack& other){
        stack temp;
        clear();

        for(int i = 0; i < other.size(); i++){
            push(other.p[i]);
        }

        return *this;
    }

    //ELEMENT ACCESS

    T& top(){
        return p[m_top];
    }

    //CAPACITY

    bool empty(){
        return m_top == -1;
    }

    int size(){
        return m_top+1;
    }

    //MODIFIERS

    void push(T d){
        if(isFull()){
            //exit(EXIT_FAILURE);
            capacity*=2;
        }
        m_top++;
        p[m_top] = d;
    }

    void pop(){
        if(empty()){
            exit(EXIT_FAILURE);
        }
        if(m_top+1 <= capacity/2 && capacity != SIZE){
            capacity /= 2;
        }
        m_top--;
    }

    void swap(stack& other){
        stack temp;
        temp = *this;
        *this = other;
        other = temp;
    }
  
    //OTHER

    bool isFull(){
        return m_top == capacity-1;
    }

    void clear(){
        while(size() != 0){
            pop();
        }
    }

};