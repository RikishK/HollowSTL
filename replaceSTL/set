// C++ implementation of the approach
#include <algorithm>
#include <iostream>
#include <math.h>
#include <stack>
#include <string>
using namespace std;



// Structure to implement a node of a BST
template <typename T>
struct Node {

	// The data content of the node
	T data;

	// Link to the left child
	Node* left;

	// Link to the right child
	Node* right;

	// Link to parent
	Node* parent;
public:

    Node(T d) : data(d){
        
    }

	Node(T d, Node* L, Node* R, Node* P) : data(d), left(L), right(R), parent(P){

	}

	// Function to print the inorder
	// traversal of the BST
	void inorder(Node* r)
	{
		if (r == NULL) {
			return;
		}
		inorder(r->left);
		cout << r->data << " ";
		inorder(r->right);
	}

	/*
		Function to check if BST contains a node
		with the given data
		
		@param r pointer to the root node
		@param d the data to search
		@return 1 if the node is present else 0
	*/
	int containsNode(Node* r, T d)
	{
		if (r == NULL) {
			return 0;
		}
		int x = r->data == d ? 1 : 0;
		return x | containsNode(r->left, d) | containsNode(r->right, d);
	}

	/*
		Function to insert a node with
		given data into the BST
		
		@param r pointer to the root node
		@param d the data to insert
		@param p pointer to the parent node
		@return pointer to the root of the resultant BST
	*/
	Node* insert(Node* r, T d, Node* p)
	{
		// Add the node when NULL node is encountered
		if (r == NULL) {
			Node<T>* tmp = new Node(d, NULL, NULL, p);
			//tmp->data = d;
			//tmp->left = tmp->right = NULL;
			return tmp;
		}

		// Traverse the left subtree if data
		// is less than the current node
		if (d < r->data) {
			r->left = insert(r->left, d, r);
			return r;
		}

		// Traverse the right subtree if data
		// is greater than the current node
		else if (d > r->data) {
			r->right = insert(r->right, d, r);
			return r;
		}
		else
			return r;
	}

	// Returns the left most node from given node
	Node<T>* findLeft(Node<T>* root){
	    if(root->left == NULL){
	        return root;
	    }
	    return findLeft(root->left);
	}

	// Returns the right most node from given node
	Node<T>* findRight(Node<T>* root){
	    if(root->right == NULL){
	        return root;
	    }
	    return findRight(root->right);
	}
};

// Class to implement a set using BST
template <typename T>
class set {

	// Pointer to the root of the
	// BST storing the set data
	Node<T>* root;

	// The number of elements in the set
	int size;

public:
    class const_iterator{
        public:
        const_iterator(Node<T>* ptr) : my_ptr(ptr){

        }
        
        const T& operator*(){
            return my_ptr->data;
        }

        const_iterator operator++(int){
            // If you can walk right, walk right, then fully left.
            // otherwise, walk up until you come from left.
            
            if(my_ptr == NULL){
                return my_ptr;
            }
            
            if(my_ptr->right != NULL){
                my_ptr = my_ptr->right;
                my_ptr = my_ptr->findLeft(my_ptr);
                
                return my_ptr;
            }
            
            while(true){
                if(my_ptr->parent == NULL){
                    my_ptr = NULL;
                    return my_ptr;
                }
                if(my_ptr->parent->left == my_ptr){
                    my_ptr = my_ptr->parent;
                    return my_ptr;
                }
                my_ptr = my_ptr->parent;
            }
        }

		bool operator==(const_iterator other){
            return my_ptr == other.my_ptr;
        }

        bool operator!=(const_iterator other){
            return my_ptr != other.my_ptr;
        }

        protected:
        Node<T>* my_ptr;
    };

	// Default constructor
	set()
	{
		root = NULL;
		size = 0;
	}

	// Copy constructor
	set(const set& s)
	{
		root = s.root;
		size = s.size;
	}

	//OPERATORS

	set& operator=(set& s){
		clear();
		
		T* arr = s.toArray();
		for(int i = 0; i < s.getSize(); i++){
		    this->insert(arr[i]);
		}

		return *this;
	}

	/*
		Function to compute the difference of two sets
		
		@param s the set to be subtracted
		@return the difference set
	*/
	set operator-(set& s)
	{
		set<T> res;
		stack<Node<T>*> nodeStack;
		nodeStack.push(this->root);

		while (!nodeStack.empty()) {
			Node<T>* node;
			node = nodeStack.top();
			nodeStack.pop();
			if (!s.contains(node->data)) {
				res.add(node->data);
			}
			if (node->right)
				nodeStack.push(node->right);
			if (node->left)
				nodeStack.push(node->left);
		}
		return res;
	}

	/*
		Function that checks equality of two sets
		
		@param s set to check equality with
		@return boolean value denoting result of check
	*/
	bool operator==(set& s)
	{
		if (s.getSize() != size) {
			return false;
		}
		stack<Node<T>*> nodeStack;
		nodeStack.push(this->root);

		while (!nodeStack.empty()) {
			Node<T>* node;
			node = nodeStack.top();
			nodeStack.pop();
			if (!s.contains(node->data)) {
				return false;
			}
			if (node->right)
				nodeStack.push(node->right);
			if (node->left)
				nodeStack.push(node->left);
		}
		return true;
	}

	/*
		Function to Add an element to the set

		@param data the element to add to the set
	*/
	void insert(const T data)
	{
		if (!root->containsNode(root, data)) {
			root = root->insert(root, data, NULL);
			size++;
		}
	}

	//ITERATORS

    const_iterator begin(){
        return const_iterator(root->findLeft(root));
    }

	const_iterator end(){
		return const_iterator(root->findRight(root))++;
	}

	
	//CAPACITY

	// checks whether the container is empty
	bool empty(){
		return size == 0;
	}

	/*
		Function to return the current size of the set
		
		@return size of set
	*/
	int getSize()
	{
		return size;
	}

	//MODIFIERS

	// clears the contents
	void clear(){
		deleteTree(root);
		root = NULL;

		size = 0;
	}

	void deleteTree(Node<T>* node){
		if(node == NULL) return;

		deleteTree(node->left);
		deleteTree(node->right);

		delete node;
	}

	// erases elements
	void erase(const_iterator pos){
        if(contains(*pos)){
            root = deleteNode(root, *pos);
            size--;
        }
	}
	Node<T>* deleteNode(Node<T>* root, T data){
	    
	    if(root == NULL)
	        return root;
	   
	    if(data < root->data){
	        root->left = deleteNode(root->left, data);
	    }
	    else if(data > root->data){
	        root->right = deleteNode(root->right, data);
	    }
	    else {
            //node has no child
	        if(root->left == NULL && root->right == NULL){
	            return NULL;
	        }
	        
	        //node has one child or no child
	        else if(root->left == NULL){
                Node<T>* temp = root->right;
                temp->parent = root->parent;
                delete root;
                return temp;
	        }
	        else if(root->right == NULL){
                Node<T>* temp = root->left;
                temp->parent = root->parent;
                delete root;
                return temp;
	        }
	        
	        //node has two children
	        Node<T>* temp = root->findLeft(root->right);
	        
	        root->data = temp->data;
	        
	        root->right = deleteNode(root->right, temp->data);
	    }
	    return root;
	}

	// swaps the contents
	void swap(set<T>& other){
		T* thisArr = this->toArray();
		T* otherArr = other.toArray();
		int thisSize = this->getSize();
		int otherSize = other.getSize();
		
		this->clear();
		other.clear();
		
		for(int i = 0; i < thisSize; i++){
		    other.insert(thisArr[i]);
		}
		
		for(int i = 0; i < otherSize; i++){
		    this->insert(otherArr[i]);
		}
	}

	//LOOKUP

	// returns the number of elements matching specific key
	int count(const T key){
		T* arr = toArray();
		int counter = 0;

		for(int i = 0; i < size; i++){
			if(arr[i] == key)
				counter++;
		}

		return counter;
	}

	// finds element with specific key
	const_iterator find(const T key){
		if(!contains(key))
			return end();
		
		const_iterator it = begin();
		for(;it != end(); it++){
			if(*it == key)
				return it;
		}

		return end();
	}

	/*
		Function to check whether the set contains an element
		
		@param data the element to search
		@return relut of check
	*/
	bool contains(T data)
	{
		return root->containsNode(root, data) ? true : false;
	}

	//OTHER

	/*
		Function to compute the union of two sets
		
		@param s set to find union with
		@return the union set
	*/
	set unionset(set& s)
	{
		set<T> res;

		// Second set is returned
		// if first set is empty
		if (root == NULL)
			return res;

		// First set is returned
		// if second set is empty
		if (s.root == NULL)
			return *this;

		// The elements of the first set
		// are added to the resultant set
		stack<Node<T>*> nodeStack;
		nodeStack.push(root);

		// Preorder traversal of the BST
		while (!nodeStack.empty()) {
			Node<T>* node;
			node = nodeStack.top();
			nodeStack.pop();

			// The data is added to the resultant set
			res.add(node->data);

			if (node->right)
				nodeStack.push(node->right);
			if (node->left)
				nodeStack.push(node->left);
		}

		// The elements of the second set
		// are added to the resultant set
		stack<Node<T>*> nodeStack1;
		nodeStack1.push(s.root);

		while (!nodeStack1.empty()) {
			Node<T>* node;
			node = nodeStack1.top();
			nodeStack1.pop();

			res.add(node->data);

			if (node->right)
				nodeStack1.push(node->right);
			if (node->left)
				nodeStack1.push(node->left);
		}

		return res;
	}

	/**
		Computes the intersection of two sets
		
		@param s the set to find intersection with
		@return the intersection set
	*/
	set intersectionset(set& s)
	{
		set<T> res;
		stack<Node<T>*> nodeStack;
		nodeStack.push(root);

		while (!nodeStack.empty()) {
			Node<T>* node;
			node = nodeStack.top();
			nodeStack.pop();
			if (s.contains(node->data)) {
				res.add(node->data);
			}
			if (node->right)
				nodeStack.push(node->right);
			if (node->left)
				nodeStack.push(node->left);
		}
		return res;
	}

	/*
		Function to compute the complement of the set
		
		@param U the universal set
		@return the complement set
	*/
	set complementset(set& U)
	{
		return (U - *this);
	}

	/*
		Function to print the cartesian product of two sets
		
		@param s the set to find product with
	*/
	void displayProduct(set& s)
	{
		int i, j, n2 = s.getSize();
		T* A = toArray();
		T* B = s.toArray();

		i = 0;

		cout << "{ ";
		for (i = 0; i < size; i++) {
			for (j = 0; j < n2; j++) {
				cout << "{ " << A[i] << " " << B[j] << " } ";
			}
		}
		cout << "}" << endl;
	}

	// Function to print power set of the set
	void displayPowerset()
	{
		int n = pow(2, size);
		T* A = toArray();
		int i;
		while (n-- > 0) {
			cout << "{ ";
			for (int i = 0; i < size; i++) {
				if ((n & (1 << i)) == 0) {
					cout << A[i] << " ";
				}
			}
			cout << "}" << endl;
		}
	}

	/*
		Function to convert the set into an array
		
		@return array of set elements
	*/
	T* toArray()
	{
		T* A = new T[size];
		int i = 0;
		stack<Node<T>*> nodeStack;
		nodeStack.push(this->root);

		while (!nodeStack.empty()) {
			Node<T>* node;
			node = nodeStack.top();
			nodeStack.pop();

			A[i++] = node->data;

			if (node->right)
				nodeStack.push(node->right);
			if (node->left)
				nodeStack.push(node->left);
		}
		return A;
	}

	// Function to convert set to sorted array
	T* toSortedArray()
	{
		T* A = new T[size];
		int i = 0;
		inorder(this->root, A, i);
		return A;
	}
	void inorder(Node<T>* r, T* a, int& i){
	    if (r == NULL) {
			return;
		}
		inorder(r->left, a, i);
		a[i++] = r->data;
		inorder(r->right, a, i);
	}

	// Function to print the contents of the set
	void displayset()
	{
		cout << "{ ";
		root->inorder(root);
		cout << "}" << endl;
	}
};

